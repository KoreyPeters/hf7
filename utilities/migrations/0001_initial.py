# Generated by Django 4.1.4 on 2023-01-21 18:24

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_ulid.models
import pendulum
import utilities.modelfields
import utilities.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="HfUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    django_ulid.models.ULIDField(
                        default=utilities.models.new_ulid,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("points", models.IntegerField(default=0)),
                (
                    "plaid_auth_token",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Activity",
            fields=[
                (
                    "id",
                    django_ulid.models.ULIDField(
                        default=utilities.models.new_ulid,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    utilities.modelfields.PendulumDateTimeField(default=pendulum.now),
                ),
                (
                    "kind",
                    models.CharField(
                        choices=[
                            ("Event attendance", "Eventium Event Attendance"),
                            ("Event organizer", "Eventium Event Organizer"),
                            (
                                "Event survey completed",
                                "Eventium Event Survey Completed",
                            ),
                            (
                                "Politician survey completed",
                                "Polium Politician Survey Completed",
                            ),
                            ("Voted in an election", "Polium Voted In Election"),
                            ("Accounts linked", "Spendium Account Linked"),
                            ("Purchase made", "Spendium Purchase Made"),
                        ],
                        max_length=50,
                    ),
                ),
                ("points", models.IntegerField(default=0)),
                ("url", models.CharField(max_length=250)),
                ("entity", django_ulid.models.ULIDField()),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    django_ulid.models.ULIDField(
                        default=utilities.models.new_ulid,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    utilities.modelfields.PendulumDateTimeField(default=pendulum.now),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="utilities.category",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Configuration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "event_organizer_point_share",
                    models.IntegerField(
                        default=20,
                        help_text="The percentage of all points the organizer of an event earns",
                    ),
                ),
                (
                    "event_check_in_cutoff_hours",
                    models.IntegerField(
                        default=2,
                        help_text="How old in hours an event can still be checked in to",
                    ),
                ),
                (
                    "survey_expiration",
                    models.IntegerField(
                        default=7,
                        help_text="Time, in days, before an offered survey can no longer be completed.",
                    ),
                ),
                (
                    "survey_percentage",
                    models.IntegerField(
                        default=10,
                        help_text="What percentage of users of this entity are offered a survey.",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Membership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "created_at",
                    utilities.modelfields.PendulumDateTimeField(default=pendulum.now),
                ),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "cost",
                    models.IntegerField(
                        default=0,
                        help_text="Amount in USD this membership costs per month",
                    ),
                ),
                (
                    "billing_cycle",
                    models.CharField(
                        choices=[("Monthly", "Monthly"), ("Annually", "Annually")],
                        max_length=20,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Survey",
            fields=[
                (
                    "id",
                    django_ulid.models.ULIDField(
                        default=utilities.models.new_ulid,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    utilities.modelfields.PendulumDateTimeField(default=pendulum.now),
                ),
                (
                    "completed_at",
                    utilities.modelfields.PendulumDateTimeField(blank=True, null=True),
                ),
                ("entity", django_ulid.models.ULIDField()),
                (
                    "expires_at",
                    utilities.modelfields.PendulumDateTimeField(blank=True, null=True),
                ),
                ("survey_results", models.JSONField(blank=True, null=True)),
                (
                    "activity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="utilities.activity",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="surveys",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Criterion",
            fields=[
                (
                    "id",
                    django_ulid.models.ULIDField(
                        default=utilities.models.new_ulid,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    utilities.modelfields.PendulumDateTimeField(default=pendulum.now),
                ),
                ("question", models.TextField()),
                ("value", models.IntegerField(default=0)),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="utilities.category",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="hfuser",
            name="membership_level",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="utilities.membership",
            ),
        ),
        migrations.AddField(
            model_name="hfuser",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
    ]
